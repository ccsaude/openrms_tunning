
#######    Estas configuracoes sao baseadas em recomendacoes do website da 
#######    oracle https://dev.mysql.com/doc/refman/5.5/en/optimization.html 
#######    Deve-se garantir que estas configuracoes estao por baixo da seccao [mysqld] no file ( /etc/my.cnf ou
#######    /etc/mysqld.conf/mysql.cnf ou qualquer que seja o ficheiro de configuracao de mysql)

####### InnoDB Buffer Pool Optimization 
#
#  InnoDB maintains a storage area called the buffer pool for caching data and indexes in memory. 
#  Knowing how the InnoDB buffer pool works, and taking advantage of it to keep frequently accessed data in memory, 
#  is an important aspect of MySQL ############tuning. 
#  For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each 
#  buffer pool instance is at least 1GB.
######  
######  Recomendacao: Deve-se calcular o valor das duas var com base na memoria RAM ( 40-60% para servidores dedicados)
######
innodb_buffer_pool_instances=3   
innodb_buffer_pool_size=3G
##### Set .._log_file_size to 25 % of buffer pool size
innodb_log_file_size=1GB
innodb_log_buffer_size=8M
innodb_flush_log_at_trx_commit=1
tmp_table_size=128M
#
#
#######  8.10 Buffering and Caching  https://dev.mysql.com/doc/refman/5.5/en/buffering-caching.html
#  When reading rows in an arbitrary sequence (for #example, following a sort), a random-read buffer may be #allocated 
#  to avoid disk seeks. 
#  The read_rnd_buffer_size #system variable determines the buffer size.
######
######  Recomendacao : extraida do ficheiro my-huge.cnf ( para server com 2GB + RAM 4+CORES) 
######  https://github.com/twitter/mysql/blob/master/support-files/my-huge.cnf.sh
#
read_rnd_buffer_size=8M
read_buffer_size=2M
sort_buffer_size=2M
myisam_sort_buffer_size = 64M
#
#########   Query Cache Configuration     https://dev.mysql.com/doc/refman/5.5/en/query-cache.html
#  The query cache stores the text of a SELECT statement together with the corresponding result that was sent to the client.
#  If an identical statement is received later, the server retrieves the results from the query cache rather than parsing
#  and executing the statementagain.#  The query cache is shared among sessions, so a result set generated by one client 
#  can be sent in response to the same query issued by another client.
query_cache_type=1
query_cache_size=32M
